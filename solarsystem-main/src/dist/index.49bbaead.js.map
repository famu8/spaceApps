{"mappings":"AAAA,2CAA2C,CAC1C,CAAA,WAAY;IACZ,YAAY,CAAC;IAEb,SAAS,KAAK,CAAC,GAAG,IAAI,EAAE;QACvB,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC;KACpD;IAED,MAAM,QAAQ;QACb,YAAY,MAAM,EAAE,IAAI,EAAE,GAAG,CAAE;YAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACpB,GAAG,GAAG,IAAI,CAAC;gBACX,IAAI,GAAG,IAAI,CAAC;aACZ;YACD,IAAI,CAAC,GAAG,GAAG,SAAS,GAAG,MAAM,GAAG,GAAG,GAAG,IAAI,GAAG,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;SACjE;QAED,SAAS,CAAC,IAAI,EAAE;YACf,OAAO,CAAI,GAAA,IAAI,GAAK;gBACnB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,AAAC;gBAC1B,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;oBAChD,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,AAAC;oBAC1B,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC;oBACtC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,GAAK;wBAC1C,IAAI,MAAM,IAAI,GAAG,EAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAAC;wBACvE,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;wBACtD,QAAQ,CAAC,QAAQ,CAAC,CAAC;qBACnB,CAAC,CAAC;iBACH,MAAM;oBACN,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC;oBACtC,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,AAAC;oBAClC,IAAI,MAAM,CAAC,MAAM,IAAI,GAAG,EAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,IAAI,CAAC,CAAC;oBAC9E,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAC7D,OAAO,MAAM,CAAC,QAAQ,CAAC;iBACvB;aACD,CAAC;SACF;KACD;IAED,IAAI,GAAG,GAAG,SAAU,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;QACtC,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;KACvC,AAAC;IAEF,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;IAElB,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;CACjB,CAAA,EAAG,CAAC","sources":["src/rpc.js"],"sourcesContent":["/* Cliente RPC basado en peticiones REST */\r\n(function () {\r\n\t\"use strict\";\r\n\r\n\tfunction debug(...args) {\r\n\t\tif (window.rpc.debug) console.log(\"[RPC]\", ...args);\r\n\t}\r\n\r\n\tclass RPCCient {\r\n\t\tconstructor(server, port, app) {\r\n\t\t\tif (!isFinite(port)) {\r\n\t\t\t\tapp = port;\r\n\t\t\t\tport = 3501;\r\n\t\t\t}\r\n\t\t\tthis.url = \"http://\" + server + \":\" + port + \"/RPC/\" + app + \"/\";\r\n\t\t}\r\n\r\n\t\tprocedure(name) {\r\n\t\t\treturn (...args) => {\r\n\t\t\t\tvar url = this.url + name;\r\n\t\t\t\tif (typeof args[args.length - 1] === \"function\") { // async\r\n\t\t\t\t\tlet callback = args.pop();\r\n\t\t\t\t\tdebug(\">>>\", name, \"(\", ...args, \")\");\r\n\t\t\t\t\trest.post(url, args, (status, response) => {\r\n\t\t\t\t\t\tif (status != 200) throw new Error(\"Error en la llamada rpc: \" + name);\r\n\t\t\t\t\t\tdebug(\"<<<\", name, \"(\", ...args, \")\", \"->\", response);\r\n\t\t\t\t\t\tcallback(response);\r\n\t\t\t\t\t});\r\n\t\t\t\t} else { // sync\r\n\t\t\t\t\tdebug(\">>>\", name, \"(\", ...args, \")\");\r\n\t\t\t\t\tlet result = rest.post(url, args);\r\n\t\t\t\t\tif (result.status != 200) throw new Error(\"Error en la llamada rpc: \" + name);\r\n\t\t\t\t\tdebug(\"<<<\", name, \"(\", ...args, \")\", \"->\", result.response);\r\n\t\t\t\t\treturn result.response;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tvar rpc = function (server, port, app) {\r\n\t\treturn new RPCCient(server, port, app);\r\n\t};\r\n\r\n\trpc.debug = false;\r\n\r\n\twindow.rpc = rpc;\r\n})();"],"names":[],"version":3,"file":"index.49bbaead.js.map","sourceRoot":"/__parcel_source_root/"}